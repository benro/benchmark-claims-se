<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:mongo="http://www.springframework.org/schema/data/mongo"
    xsi:schemaLocation="http://www.springframework.org/schema/context
          http://www.springframework.org/schema/context/spring-context-3.0.xsd
          http://www.springframework.org/schema/data/mongo
          http://www.springframework.org/schema/data/mongo/spring-mongo-1.0.xsd
          http://www.springframework.org/schema/beans
          http://www.springframework.org/schema/beans/spring-beans-3.0.xsd">

 
    <!--
        alfresco-benchmark-tests-cmis: CMIS load test
     -->
         
    <!-- Import any application contexts for test runs -->
    <import resource="classpath:config/spring/test-common-context.xml" />
    
    <!--                 -->
    <!-- Reporting       -->
    <!--                 -->

    <!-- The CompletionEstimator looking at the number of processes performed -->
    <bean id="completionEstimator.sessionCount" class="org.alfresco.bm.test.SessionCountCompletionEstimator">
        <constructor-arg name="eventService" ref="eventService" />
        <constructor-arg name="resultService" ref="resultService" />
        <constructor-arg name="sessionService" ref="sessionService" />
        <constructor-arg name="sessionCount" value="${load.sessionCount}" />
    </bean>

    <!-- Override the default estimator to use the desired estimators -->
    <bean id="completionEstimator" class="org.alfresco.bm.test.CompoundCompletionEstimator">
        <constructor-arg name="eventService" ref="eventService" />
        <constructor-arg name="resultService" ref="resultService" />
        <constructor-arg name="estimators">
            <list>
                <ref bean="completionEstimator.elapsedTime" />  <!-- This is included from the common context file -->
                <ref bean="completionEstimator.sessionCount" />
            </list>
        </constructor-arg>
    </bean>

    <!--                 -->
    <!-- Data Services   -->
    <!--                 -->
    
    <bean id="userDataService" class="org.alfresco.bm.user.UserDataServiceImpl">
        <constructor-arg name="db" ref="testMongoDB" />
        <constructor-arg name="collection" value="${users.collectionName}" />
    </bean>
    
    <bean id="claimDataDAO" class="org.alfresco.bm.claim.ClaimDataDAO">
        <constructor-arg name="db" ref="testMongoDB" />
        <constructor-arg name="collection" value="${claim.collectionName}" />
    </bean>
    
    <!--                 -->
    <!-- Test Files      -->
    <!--                 -->

    <!-- This code is inherited from the benchmark server dependency -->
    <!-- The config options are pulled in via the FILES and FILES_FTP namespace in app.properties -->
    <bean id="fileDataService" class="org.alfresco.bm.file.FileDataServiceImpl">
        <constructor-arg name="db" ref="testMongoDB" />
        <constructor-arg name="collection" value="${files.collection.name}" />
    </bean>
    <bean id="testFileService" class="org.alfresco.bm.file.FtpTestFileService">
        <constructor-arg name="fileDataService" ref="fileDataService" />
        <constructor-arg name="localDir" value="${files.cache.dir}" />
        <constructor-arg name="ftpHost" value="${files.ftp.host}" />
        <constructor-arg name="ftpPort" value="${files.ftp.port}" />
        <constructor-arg name="ftpUsername" value="${files.ftp.username}" />
        <constructor-arg name="ftpPassword" value="${files.ftp.password}" />
        <constructor-arg name="ftpPath" value="${files.ftp.path}" />
    </bean>

    <!--                 -->
    <!-- CMIS Op Context -->
    <!--                 -->

    <!-- The cmis benchmark test code is pulled in using the 'classes' classifier -->
    <!-- The config options are pulled in via the CMIS namespaces in app.properties -->
    <bean id="cmis.opCtx" class="org.apache.chemistry.opencmis.client.runtime.OperationContextImpl" >
        <property name="cacheEnabled" value="${ctx.cacheEnabled}" />
        <property name="filterString" value="${ctx.filter}" />
        <property name="includeAcls" value="${ctx.includeAcls}" />
        <property name="includeAllowableActions" value="${ctx.includeAllowableActions}" />
        <property name="includePathSegments" value="${ctx.includePathSegments}" />
        <property name="includePolicies" value="${ctx.includePolicies}" />
        <property name="includeRelationships" value="${ctx.includeRelationships}" />
        <property name="loadSecondaryTypeProperties" value="${ctx.loadSecondaryTypeProperties}" />
        <property name="maxItemsPerPage" value="${ctx.maxItemsPerPage}" />
        <property name="orderBy" value="${ctx.orderBy}" />
        <property name="renditionFilterString" value="${ctx.renditionFilter}" />
    </bean>
    
    <!--                 -->
    <!-- EventProcessors -->
    <!--                 -->
    
    <!-- Check that we have users and claims to work with -->
    
    <bean id="event.start" class="org.alfresco.bm.user.CheckUserCountEventProcessor" parent="event.base" >
        <constructor-arg name="userDataService" ref="userDataService" />
        <constructor-arg name="userCount" value="${claim.minUserCount}" />
        <property name="eventNameUsersReady" value="claims.usersReady"/>
        <property name="chart" value="false" />
    </bean>
    <bean id="producer.claims.usersReady" class="org.alfresco.bm.event.producer.RedirectEventProducer" parent="producer.base" >
        <constructor-arg name="newEventName" value="claims.checkClaims" />
    </bean>
    <bean id="event.claims.checkClaims" class="org.alfresco.bm.claim.CheckClaimsCountEventProcessor" parent="event.base" >
        <constructor-arg name="claimDataDAO" ref="claimDataDAO" />
        <constructor-arg name="minClaimCount" value="${claim.minClaimCount}" />
        <property name="eventNameClaimsReady" value="claims.claimsReady"/>
        <property name="chart" value="false" />
    </bean>
    <bean id="producer.claims.claimsReady" class="org.alfresco.bm.event.producer.RedirectEventProducer" parent="producer.base" >
        <constructor-arg name="newEventName" value="claims.createSessions" />
    </bean>
    
    <!-- The users and claims are in place. -->
    <!-- Start generating sessions -->

    <!-- Emits events at the prescribed interval, including self-scheduling to keep refreshing the number of events awaiting processing. -->
    <bean id="event.claims.createSessions" class="org.alfresco.bm.user.GenerateUserSessionsEventProcessor" parent="event.base" >
        <constructor-arg name="userDataService" ref="userDataService" />
        <constructor-arg name="outputEventName" value="claim.startSession" />
        <constructor-arg name="timeBetweenEvents" value="${load.sessionDelay}" />
        <constructor-arg name="outputEventCount" value="${load.sessionCount}" />
        <property name="eventNameRaiseEvents" value="claims.createSessions" />
        <property name="batchSize" value="${load.sessionBatchSize}" />
        <property name="chart" value="false"/>
    </bean>
    <!-- A new CMIS session is created and bound to the load test's session -->
    <bean id="event.claim.startSession" class="org.alfresco.bm.cmis.StartCMISSession" parent="event.base" >
        <constructor-arg name="userDataService" ref="userDataService" />
        <constructor-arg name="sessionService" ref="sessionService" />
        <constructor-arg name="bindingUrl" value="${cmis.bindingUrl}" />
        <constructor-arg name="bindingType" value="${cmis.bindingType}" />
        <constructor-arg name="repositoryId" value="${cmis.repositoryId}" />
        <constructor-arg name="ctx" ref="cmis.opCtx" />
        <property name="eventNameSessionStarted" value="claim.sessionStarted" />
    </bean>
    <!-- Terminate each session, for now -->
    <bean id="producer.claim.sessionStarted" class="org.alfresco.bm.event.producer.TerminateEventProducer" parent="producer.base" />
    
</beans>