<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:mongo="http://www.springframework.org/schema/data/mongo"
    xsi:schemaLocation="http://www.springframework.org/schema/context
          http://www.springframework.org/schema/context/spring-context-3.0.xsd
          http://www.springframework.org/schema/data/mongo
          http://www.springframework.org/schema/data/mongo/spring-mongo-1.0.xsd
          http://www.springframework.org/schema/beans
          http://www.springframework.org/schema/beans/spring-beans-3.0.xsd">

 
    <!--
        alfresco-benchmark-tests-cmis: CMIS load test
     -->
         
    <!-- Import any application contexts for test runs -->
    <import resource="classpath:config/spring/test-common-context.xml" />
    
    <!--                 -->
    <!-- Reporting       -->
    <!--                 -->

    <!-- The CompletionEstimator looking at the number of processes performed -->
    <bean id="completionEstimator.sessionCount" class="org.alfresco.bm.test.SessionCountCompletionEstimator">
        <constructor-arg name="eventService" ref="eventService" />
        <constructor-arg name="resultService" ref="resultService" />
        <constructor-arg name="sessionService" ref="sessionService" />
        <constructor-arg name="sessionCount" value="${claim.numberOfClaims}" />
    </bean>

    <!-- Override the default estimator to use the desired estimators -->
    <bean id="completionEstimator" class="org.alfresco.bm.test.CompoundCompletionEstimator">
        <constructor-arg name="eventService" ref="eventService" />
        <constructor-arg name="resultService" ref="resultService" />
        <constructor-arg name="estimators">
            <list>
                <ref bean="completionEstimator.elapsedTime" />
                <ref bean="completionEstimator.sessionCount" />
            </list>
        </constructor-arg>
    </bean>

    <!--                 -->
    <!-- Data Services   -->
    <!--                 -->
    
    <bean id="userDataService" class="org.alfresco.bm.user.UserDataServiceImpl">
        <constructor-arg name="db" ref="testMongoDB" />
        <constructor-arg name="collection" value="${users.collectionName}" />
    </bean>
    
    <!--                 -->
    <!-- Test Files      -->
    <!--                 -->

    <!-- This code is inherited from the benchmark server dependency -->
    <!-- The config options are pulled in via the FILES and FILES_FTP namespace in app.properties -->
    <bean id="fileDataService" class="org.alfresco.bm.file.FileDataServiceImpl">
        <constructor-arg name="db" ref="testMongoDB" />
        <constructor-arg name="collection" value="${files.collection.name}" />
    </bean>
    <bean id="testFileService" class="org.alfresco.bm.file.FtpTestFileService">
        <constructor-arg name="fileDataService" ref="fileDataService" />
        <constructor-arg name="localDir" value="${files.cache.dir}" />
        <constructor-arg name="ftpHost" value="${files.ftp.host}" />
        <constructor-arg name="ftpPort" value="${files.ftp.port}" />
        <constructor-arg name="ftpUsername" value="${files.ftp.username}" />
        <constructor-arg name="ftpPassword" value="${files.ftp.password}" />
        <constructor-arg name="ftpPath" value="${files.ftp.path}" />
    </bean>

    <!--                 -->
    <!-- CMIS Op Context -->
    <!--                 -->

    <!-- The cmis benchmark test code is pulled in using the 'classes' classifier -->
    <!-- The config options are pulled in via the CMIS namespaces in app.properties -->
    <bean id="cmis.opCtx" class="org.apache.chemistry.opencmis.client.runtime.OperationContextImpl" >
        <property name="cacheEnabled" value="${ctx.cacheEnabled}" />
        <property name="filterString" value="${ctx.filter}" />
        <property name="includeAcls" value="${ctx.includeAcls}" />
        <property name="includeAllowableActions" value="${ctx.includeAllowableActions}" />
        <property name="includePathSegments" value="${ctx.includePathSegments}" />
        <property name="includePolicies" value="${ctx.includePolicies}" />
        <property name="includeRelationships" value="${ctx.includeRelationships}" />
        <property name="loadSecondaryTypeProperties" value="${ctx.loadSecondaryTypeProperties}" />
        <property name="maxItemsPerPage" value="${ctx.maxItemsPerPage}" />
        <property name="orderBy" value="${ctx.orderBy}" />
        <property name="renditionFilterString" value="${ctx.renditionFilter}" />
    </bean>
    
    <!--                 -->
    <!-- EventProcessors -->
    <!--                 -->
    <!-- The original sample 'process' code is going to be commented out. -->
    <!-- This file will be built up in conjunction with the test BMClaimsTest -->
    <!-- For now, we just send the 'start' event straight into termination -->
    <bean id="event.start" class="org.alfresco.bm.event.RaiseEventsEventProcessor" parent="event.base" >
        <constructor-arg name="outputEventName" value="ignore" />
        <constructor-arg name="timeBetweenEvents" value="100" />
        <constructor-arg name="outputEventCount" value="10" />
    </bean>
    <bean id="event.ignore" class="org.alfresco.bm.event.DoNothingEventProcessor" parent="event.base" />

    <!-- Original sample stuff after this -->
    <!--
        The event processors will handle events based on their bean names after removal of the 'event.' prefix.
        So, for example:
            bean "event.start" will handle events named "start"
            bean "event.invite" will handle events named "invite"
        This behavior can be overridden.  See the javadocs of AbstractEventProcessor.
        
        The 'producer.process' bean shows how an event can be redirected with an optional delay: in this case, to 'event.doProcess'.
        The 'producer.users.ready' renames the 'users.ready' event to 'scheduleProcesses' without any other modification.
        The 'producer.processDone' effectively absorbs the 'processDone' events.
    -->
    <!--
    <bean id="event.start" class="org.alfresco.bm.event.RenameEventProcessor" parent="event.base" >
        <constructor-arg name="outputEventName" value="scheduleProcesses" />
        <property name="chart" value="false"/>
    </bean>
    <bean id="event.scheduleProcesses" class="org.alfresco.bm.process.ScheduleProcesses" parent="event.base" >
        <constructor-arg name="sessionService" ref="sessionService" />
        <constructor-arg name="processDataDAO" ref="processDataDAO" />
        <constructor-arg name="testRunFqn" value="${testRunFqn}" />
        <constructor-arg name="processCount" value="${proc.processCount}" />
        <constructor-arg name="timeBetweenProcesses" value="${proc.timeBetweenProcesses}" />
        <property name="batchSize" value="${proc.scheduleBatchSize}" />
        <property name="chart" value="true" />
    </bean>
    <bean id="producer.process" class="org.alfresco.bm.event.producer.RedirectEventProducer" parent="producer.base" >
        <constructor-arg name="newEventName" value="executeProcess" />
        <constructor-arg name="delay" value="1" />
    </bean>
    <bean id="event.executeProcess" class="org.alfresco.bm.process.ExecuteProcess" parent="event.base" >
        <constructor-arg name="sessionService" ref="sessionService" />
        <constructor-arg name="processDataDAO" ref="processDataDAO" />
        <constructor-arg name="testFileService" ref="testFileService" />
        <property name="chart" value="true" />
    </bean>
    <bean id="producer.processDone" class="org.alfresco.bm.event.producer.TerminateEventProducer" parent="producer.base" />
    -->
    
</beans>